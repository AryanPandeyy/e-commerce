// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // cant keep with docker running sqlcontainter
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// one store many billboards and all
// one to one syntax is -> something Something[]
// one to many syntax is -> something Something?
model Store {
  id         String       @id @default(uuid())
  name       String
  // if you have given name then you gotta include this here.
  billboards BillBoards[] @relation("StoreToBillBoard")
  categories Category[]   @relation("StoreToCategory")
  products   Products[]
  sizes      Size[]
  colors     Colors[]
  orders     Orders[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// one billboards one category
model BillBoards {
  id        String     @id @default(uuid())
  label     String
  storeId   String
  store     Store      @relation("StoreToBillBoard", fields: [storeId], references: [id])
  // this image is different from product image
  imageUrl  String
  createdAt DateTime   @default(now())
  category  Category[]
}

model Products {
  id         String   @id @default(uuid())
  name       String
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id])
  price      Int
  archived   Boolean  @default(false)
  featured   Boolean  @default(false)
  // one to many relationship
  // when you create a product then a category must to be selected
  category   Category @relation("CategoryToProducts", fields: [categoryId], references: [id])
  categoryId String
  color      Colors   @relation(fields: [colorId], references: [id])
  colorId    String
  size       Size     @relation(fields: [sizeId], references: [id])
  sizeId     String
  order      Orders[]
  Image      Image[]
  createdAt  DateTime @default(now())
}

model Category {
  id          String     @id @default(uuid())
  name        String
  storeId     String
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id])
  // One category can have many products
  product     Products[] @relation("CategoryToProducts")
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-one-relations
  billboard   BillBoards @relation(fields: [billBoardId], references: [id])
  billBoardId String
  createdAt   DateTime   @default(now())
}

model Size {
  id        String     @id @default(uuid())
  name      String
  storeId   String
  store     Store      @relation(fields: [storeId], references: [id])
  value     String
  // One category can have many products
  // Instead of storing whole product only a id will be saved of it
  product   Products[]
  createdAt DateTime   @default(now())
}

model Colors {
  id        String     @id @default(uuid())
  name      String
  storeId   String
  store     Store      @relation(fields: [storeId], references: [id])
  value     String
  product   Products[]
  // One category can have many products
  // Instead of storing whole product only a id will be saved of it
  createdAt DateTime   @default(now())
}

model Orders {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  products  Products @relation(fields: [productId], references: [id])
  productId String
  phoneNo   Int
  address   String
  price     Int
  paid      Boolean  @default(false)
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Products @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}
